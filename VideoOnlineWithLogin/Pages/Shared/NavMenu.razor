@using VideoOnlineWithLogin.Server.Services
@inject NavigationManager navigationManager

<div class="bg-light" id="sidebar-wrapper">
    <div class="menu list-group list-group-flush">

        <AuthorizeView>
            <Authorized>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/employeeoverview">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Employees
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/employeeedit">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Add new employee
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/usereoverview">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Users
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/usereedit">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Add new user
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/videoeoverview">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Videos
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="/videoeedit">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Add new video
                </NavLink>
                <NavLink class="list-group-item list-group-item-action bg-light" href="Logout">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Log out
                </NavLink>

                <div class="top-row px-4">
                    @if (chatting)
                    {
                        <p>
                            Connected as <b>@username</b>
                        </p>
                        <button class="btn btn-outline-warning" @onclick="@DisconnectAsync">  Disconnect</button>
                    }
                </div>

                <div class="content px-4">

                    @if (!chatting)
                    {
                        <p>
                            Enter a username to chat:
                        </p>

                        <input type="text" maxlength="32" @bind="@username" />
                        <button type="button" @onclick="@Chat"><span class="btn btn-outline-danger" aria-hidden="true"></span> Login</button>

                        @if (message != null)
                        {
                            <div class="invalid-feedback">@message</div>
                        }
                    }

                    @if (chatting)
                    {
                <container>
                    <div id="scrollbox">

                        @foreach (var item in messages)
                        {
                            <div class="@item.CSS">
                                <small class="user">@item.Username</small>
                                <strong class="msg">@item.Body</strong>
                            </div>
                        }
                        <hr />
                        <textarea class="input-lg" placeholder="Say anything" @bind="@newMessage"></textarea>
                        <button class="btn btn-outline-danger" @onclick="@SendAsync">  Send</button>
                    </div>
                </container>
                            }
                            <p>@DateTime.Now.Year - KaurAI</p>

                    </div>
                    

                </Authorized>

            <NotAuthorized>
                <a href="Identity/Account/Register">Register</a>
                <a href="Identity/Account/Login">Log in</a>
            </NotAuthorized>

        </AuthorizeView>

    </div>
</div>

@code {
    bool collapseNavMenu = true;
    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    
    bool chatting = false;    
    string username = null;
    ChatClient client = null;    
    string message = null;    
    string newMessage = null;   
    List<Message> messages = new List<Message>();

    
    async Task Chat()
    {        
        if (string.IsNullOrWhiteSpace(username))
        {
            message = "Please enter a name";
            return;
        };

        try
        {
            
            messages.Clear();
           
            client = new ChatClient(username, navigationManager);            
            client.MessageReceived += MessageReceived;           
            Console.WriteLine("Index: chat starting...");
            await client.StartAsync();
            Console.WriteLine("Index: chat started?");

            chatting = true;
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    
    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (chatting)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended";
            chatting = false;
        }
    }

    async Task SendAsync()
    {
        if (chatting && !string.IsNullOrWhiteSpace(newMessage))
        {            
            await client.SendAsync(newMessage);            
            newMessage = "";
        }
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }
}

